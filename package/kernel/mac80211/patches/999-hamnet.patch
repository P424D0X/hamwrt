--- a/drivers/net/wireless/ath/ath5k/ath5k.h
+++ b/drivers/net/wireless/ath/ath5k/ath5k.h
@@ -186,8 +186,8 @@
 #define AR5K_TUNE_CWMAX				1023
 #define AR5K_TUNE_CWMAX_11B			1023
 #define AR5K_TUNE_CWMAX_XR			7
-#define AR5K_TUNE_NOISE_FLOOR			-72
-#define AR5K_TUNE_CCA_MAX_GOOD_VALUE		-95
+#define AR5K_TUNE_NOISE_FLOOR			-95 // was -72
+#define AR5K_TUNE_CCA_MAX_GOOD_VALUE		-115 // was -95
 #define AR5K_TUNE_MAX_TXPOWER			63
 #define AR5K_TUNE_DEFAULT_TXPOWER		25
 #define AR5K_TUNE_TPC_TXPOWER			false
@@ -1240,10 +1240,11 @@
 #define AR5K_MAX_GPIO		10
 #define AR5K_MAX_RF_BANKS	8
 
+/* HAMNET */
 #if CHAN_DEBUG
-#define ATH_CHAN_MAX	(26 + 26 + 26 + 200 + 200)
+#define ATH_CHAN_MAX	(28 + 28 + 28 + 200 + 200)
 #else
-#define ATH_CHAN_MAX	(14 + 14 + 14 + 252 + 20)
+#define ATH_CHAN_MAX	(28 + 28 + 28 + 252 + 20)
 #endif
 
 #define	ATH_RXBUF	40		/* number of RX buffers */
--- a/drivers/net/wireless/ath/ath5k/attach.c
+++ b/drivers/net/wireless/ath/ath5k/attach.c
@@ -119,7 +119,7 @@
 	ah->ah_retry_short = AR5K_INIT_RETRY_SHORT;
 	ah->ah_retry_long = AR5K_INIT_RETRY_LONG;
 	ah->ah_ant_mode = AR5K_ANTMODE_DEFAULT;
-	ah->ah_noise_floor = -95;	/* until first NF calibration is run */
+	ah->ah_noise_floor = -115; // was -95;	/* until first NF calibration is run */
 	ah->ani_state.ani_mode = ATH5K_ANI_MODE_AUTO;
 	ah->ah_current_channel = &ah->channels[0];
 
--- a/drivers/net/wireless/ath/ath5k/base.c
+++ b/drivers/net/wireless/ath/ath5k/base.c
@@ -288,7 +288,9 @@
 		/* 802.11j 5.030-5.080 GHz (20MHz) */
 		(chan == 8 || chan == 12 || chan == 16) ||
 		/* 802.11j 4.9GHz (20MHz) */
-		(chan == 184 || chan == 188 || chan == 192 || chan == 196));
+		(chan == 184 || chan == 188 || chan == 192 || chan == 196) ||
+		/* HAMNET 5.650-5.850 GHz (5MHz) */
+		(chan >= 130 && chan <= 170));
 }
 #endif
 
@@ -307,7 +309,7 @@
 		break;
 	case AR5K_MODE_11B:
 	case AR5K_MODE_11G:
-		size = 26;
+		size = 255; // was 26
 		band = NL80211_BAND_2GHZ;
 		break;
 	default:
--- a/drivers/net/wireless/ath/ath5k/caps.c
+++ b/drivers/net/wireless/ath/ath5k/caps.c
@@ -82,7 +82,7 @@
 		    (AR5K_EEPROM_HDR_11G(ee_header) &&
 		     ah->ah_version != AR5K_AR5211)) {
 			/* 2312 */
-			caps->cap_range.range_2ghz_min = 2412;
+			caps->cap_range.range_2ghz_min = 2312;
 			caps->cap_range.range_2ghz_max = 2732;
 
 			/* Override 2GHz modes on SoCs that need it
--- a/drivers/net/wireless/ath/ath9k/ar5008_phy.c
+++ b/drivers/net/wireless/ath/ath9k/ar5008_phy.c
@@ -432,7 +432,7 @@
 		if (AR_NO_SPUR == cur_bb_spur)
 			break;
 		cur_bb_spur = cur_bb_spur - (chan->channel * 10);
-		if ((cur_bb_spur > -95) && (cur_bb_spur < 95)) {
+		if ((cur_bb_spur > -112) && (cur_bb_spur < 95)) {
 			bb_spur = cur_bb_spur;
 			break;
 		}
--- a/drivers/net/wireless/ath/ath9k/ar9002_phy.h
+++ b/drivers/net/wireless/ath/ath9k/ar9002_phy.h
@@ -606,14 +606,14 @@
 #define AR_PHY_CCA_NOM_VAL_5416_5GHZ            -100
 #define AR_PHY_CCA_MIN_GOOD_VAL_5416_2GHZ     -100
 #define AR_PHY_CCA_MIN_GOOD_VAL_5416_5GHZ     -110
-#define AR_PHY_CCA_MAX_GOOD_VAL_5416_2GHZ     -80
+#define AR_PHY_CCA_MAX_GOOD_VAL_5416_2GHZ     -112 // was -80
 #define AR_PHY_CCA_MAX_GOOD_VAL_5416_5GHZ     -90
 
 #define AR_PHY_CCA_NOM_VAL_9280_2GHZ         -112
 #define AR_PHY_CCA_NOM_VAL_9280_5GHZ         -112
 #define AR_PHY_CCA_MIN_GOOD_VAL_9280_2GHZ  -127
 #define AR_PHY_CCA_MIN_GOOD_VAL_9280_5GHZ  -122
-#define AR_PHY_CCA_MAX_GOOD_VAL_9280_2GHZ  -97
+#define AR_PHY_CCA_MAX_GOOD_VAL_9280_2GHZ  -112 // was -97
 #define AR_PHY_CCA_MAX_GOOD_VAL_9280_5GHZ  -102
 
 #define AR_PHY_CCA_NOM_VAL_9285_2GHZ           -118
@@ -626,6 +626,6 @@
 
 #define AR_PHY_CCA_NOM_VAL_9287_2GHZ           -112
 #define AR_PHY_CCA_MIN_GOOD_VAL_9287_2GHZ    -127
-#define AR_PHY_CCA_MAX_GOOD_VAL_9287_2GHZ    -97
+#define AR_PHY_CCA_MAX_GOOD_VAL_9287_2GHZ    -112 // was -97
 
 #endif
--- a/drivers/net/wireless/ath/ath9k/ar9003_phy.h
+++ b/drivers/net/wireless/ath/ath9k/ar9003_phy.h
@@ -338,14 +338,14 @@
 #define AR_PHY_CCA_NOM_VAL_9300_5GHZ          -115
 #define AR_PHY_CCA_MIN_GOOD_VAL_9300_2GHZ     -125
 #define AR_PHY_CCA_MIN_GOOD_VAL_9300_5GHZ     -125
-#define AR_PHY_CCA_MAX_GOOD_VAL_9300_2GHZ     -60
+#define AR_PHY_CCA_MAX_GOOD_VAL_9300_2GHZ     -110 // was -60
 #define AR_PHY_CCA_MAX_GOOD_VAL_9300_5GHZ     -60
-#define AR_PHY_CCA_MAX_GOOD_VAL_9300_FCC_2GHZ -95
+#define AR_PHY_CCA_MAX_GOOD_VAL_9300_FCC_2GHZ -112 // was -95
 #define AR_PHY_CCA_MAX_GOOD_VAL_9300_FCC_5GHZ -100
 
 #define AR_PHY_CCA_NOM_VAL_9462_2GHZ          -127
 #define AR_PHY_CCA_MIN_GOOD_VAL_9462_2GHZ     -127
-#define AR_PHY_CCA_MAX_GOOD_VAL_9462_2GHZ     -60
+#define AR_PHY_CCA_MAX_GOOD_VAL_9462_2GHZ     -112 // was -60
 #define AR_PHY_CCA_NOM_VAL_9462_5GHZ          -127
 #define AR_PHY_CCA_MIN_GOOD_VAL_9462_5GHZ     -127
 #define AR_PHY_CCA_MAX_GOOD_VAL_9462_5GHZ     -60
--- a/drivers/net/wireless/ath/ath9k/common-init.c
+++ b/drivers/net/wireless/ath/ath9k/common-init.c
@@ -22,14 +22,14 @@
 	.band = NL80211_BAND_2GHZ, \
 	.center_freq = (_freq), \
 	.hw_value = (_idx), \
-	.max_power = 20, \
+	.max_power = 30, \
 }
 
 #define CHAN5G(_freq, _idx) { \
 	.band = NL80211_BAND_5GHZ, \
 	.center_freq = (_freq), \
 	.hw_value = (_idx), \
-	.max_power = 20, \
+	.max_power = 30, \
 }
 
 /* Some 2 GHz radios are actually tunable on 2312-2732
@@ -37,20 +37,40 @@
  * we have calibration data for all cards though to make
  * this static */
 static const struct ieee80211_channel ath9k_2ghz_chantable[] = {
-	CHAN2G(2412, 0), /* Channel 1 */
-	CHAN2G(2417, 1), /* Channel 2 */
-	CHAN2G(2422, 2), /* Channel 3 */
-	CHAN2G(2427, 3), /* Channel 4 */
-	CHAN2G(2432, 4), /* Channel 5 */
-	CHAN2G(2437, 5), /* Channel 6 */
-	CHAN2G(2442, 6), /* Channel 7 */
-	CHAN2G(2447, 7), /* Channel 8 */
-	CHAN2G(2452, 8), /* Channel 9 */
-	CHAN2G(2457, 9), /* Channel 10 */
-	CHAN2G(2462, 10), /* Channel 11 */
-	CHAN2G(2467, 11), /* Channel 12 */
-	CHAN2G(2472, 12), /* Channel 13 */
-	CHAN2G(2484, 13), /* Channel 14 */
+	CHAN2G(2312, -19), /* Channel -19 */
+	CHAN2G(2317, -18), /* Channel -18 */
+	CHAN2G(2322, -17), /* Channel -17 */
+	CHAN2G(2327, -16), /* Channel -16 */
+	CHAN2G(2332, -15), /* Channel -15 */
+	CHAN2G(2337, -14), /* Channel -14 */
+	CHAN2G(2342, -13), /* Channel -13 */
+	CHAN2G(2347, -12), /* Channel -12 */
+	CHAN2G(2352, -11), /* Channel -11 */
+	CHAN2G(2357, -10), /* Channel -10 */
+	CHAN2G(2362, -9),  /* Channel -9 */
+	CHAN2G(2367, -8),  /* Channel -8 */
+	CHAN2G(2372, -7),  /* Channel -7 */
+	CHAN2G(2377, -6),  /* Channel -6 */
+	CHAN2G(2382, -5),  /* Channel -5 */
+	CHAN2G(2387, -4),  /* Channel -4 */
+	CHAN2G(2392, -3),  /* Channel -3 */
+	CHAN2G(2397, -2),  /* Channel -2 */
+	CHAN2G(2402, -1),  /* Channel -1 */
+	CHAN2G(2407, 0),   /* Channel 0 */
+	CHAN2G(2412, 1),   /* Channel 1 */
+	CHAN2G(2417, 2),   /* Channel 2 */
+	CHAN2G(2422, 3),   /* Channel 3 */
+	CHAN2G(2427, 4),   /* Channel 4 */
+	CHAN2G(2432, 5),   /* Channel 5 */
+	CHAN2G(2437, 6),   /* Channel 6 */
+	CHAN2G(2442, 7),   /* Channel 7 */
+	CHAN2G(2447, 8),   /* Channel 8 */
+	CHAN2G(2452, 9),   /* Channel 9 */
+	CHAN2G(2457, 10),  /* Channel 10 */
+	CHAN2G(2462, 11),  /* Channel 11 */
+	CHAN2G(2467, 12),  /* Channel 12 */
+	CHAN2G(2472, 13),  /* Channel 13 */
+	CHAN2G(2484, 14),  /* Channel 14 */
 };
 
 /* Some 5 GHz radios are actually tunable on XXXX-YYYY
@@ -59,33 +79,38 @@
  * this static */
 static const struct ieee80211_channel ath9k_5ghz_chantable[] = {
 	/* _We_ call this UNII 1 */
-	CHAN5G(5180, 14), /* Channel 36 */
-	CHAN5G(5200, 15), /* Channel 40 */
-	CHAN5G(5220, 16), /* Channel 44 */
-	CHAN5G(5240, 17), /* Channel 48 */
+	CHAN5G(5180, 15), /* Channel 36 */
+	CHAN5G(5200, 16), /* Channel 40 */
+	CHAN5G(5220, 17), /* Channel 44 */
+	CHAN5G(5240, 18), /* Channel 48 */
 	/* _We_ call this UNII 2 */
-	CHAN5G(5260, 18), /* Channel 52 */
-	CHAN5G(5280, 19), /* Channel 56 */
-	CHAN5G(5300, 20), /* Channel 60 */
-	CHAN5G(5320, 21), /* Channel 64 */
+	CHAN5G(5260, 19), /* Channel 52 */
+	CHAN5G(5280, 20), /* Channel 56 */
+	CHAN5G(5300, 21), /* Channel 60 */
+	CHAN5G(5320, 22), /* Channel 64 */
 	/* _We_ call this "Middle band" */
-	CHAN5G(5500, 22), /* Channel 100 */
-	CHAN5G(5520, 23), /* Channel 104 */
-	CHAN5G(5540, 24), /* Channel 108 */
-	CHAN5G(5560, 25), /* Channel 112 */
-	CHAN5G(5580, 26), /* Channel 116 */
-	CHAN5G(5600, 27), /* Channel 120 */
-	CHAN5G(5620, 28), /* Channel 124 */
-	CHAN5G(5640, 29), /* Channel 128 */
-	CHAN5G(5660, 30), /* Channel 132 */
-	CHAN5G(5680, 31), /* Channel 136 */
-	CHAN5G(5700, 32), /* Channel 140 */
+	CHAN5G(5500, 23), /* Channel 100 */
+	CHAN5G(5520, 24), /* Channel 104 */
+	CHAN5G(5540, 25), /* Channel 108 */
+	CHAN5G(5560, 26), /* Channel 112 */
+	CHAN5G(5580, 27), /* Channel 116 */
+	CHAN5G(5600, 28), /* Channel 120 */
+	CHAN5G(5620, 29), /* Channel 124 */
+	CHAN5G(5640, 30), /* Channel 128 */
+	CHAN5G(5660, 31), /* Channel 132 */
+	CHAN5G(5675, 32), /* Channel 135 */
+	CHAN5G(5680, 33), /* Channel 136 */
+	CHAN5G(5685, 34), /* Channel 137 */
+	CHAN5G(5695, 35), /* Channel 139 */
+	CHAN5G(5700, 36), /* Channel 140 */
 	/* _We_ call this UNII 3 */
-	CHAN5G(5745, 33), /* Channel 149 */
-	CHAN5G(5765, 34), /* Channel 153 */
-	CHAN5G(5785, 35), /* Channel 157 */
-	CHAN5G(5805, 36), /* Channel 161 */
-	CHAN5G(5825, 37), /* Channel 165 */
+	CHAN5G(5745, 37), /* Channel 149 */
+	CHAN5G(5765, 38), /* Channel 153 */
+	CHAN5G(5785, 39), /* Channel 157 */
+	CHAN5G(5795, 40), /* Channel 159 */
+	CHAN5G(5805, 41), /* Channel 161 */
+	CHAN5G(5815, 42), /* Channel 163 */
+	CHAN5G(5825, 43), /* Channel 165 */
 };
 
 /* Atheros hardware rate code addition for short premble */
--- a/drivers/net/wireless/ath/ath9k/hw.h
+++ b/drivers/net/wireless/ath/ath9k/hw.h
@@ -70,11 +70,11 @@
 
 #define ATH_AMPDU_LIMIT_MAX        (64 * 1024 - 1)
 
-#define	ATH_DEFAULT_NOISE_FLOOR -95
+#define	ATH_DEFAULT_NOISE_FLOOR -112 // was -95
 
 #define ATH9K_RSSI_BAD			-128
 
-#define ATH9K_NUM_CHANNELS	38
+#define ATH9K_NUM_CHANNELS	63 // was 38
 
 /* Register read/write primitives */
 #define REG_WRITE(_ah, _reg, _val) \
--- a/net/wireless/reg.c
+++ b/net/wireless/reg.c
@@ -221,34 +221,34 @@
 	.n_reg_rules = 8,
 	.alpha2 =  "00",
 	.reg_rules = {
-		/* IEEE 802.11b/g, channels 1..11 */
-		REG_RULE(2412-10, 2462+10, 40, 6, 20, 0),
+		/* IEEE 802.11b/g, channels -19..11 */
+		REG_RULE(2312-10, 2462+10, 40, 6, 30, 0),
 		/* IEEE 802.11b/g, channels 12..13. */
-		REG_RULE(2467-10, 2472+10, 20, 6, 20,
+		REG_RULE(2467-10, 2472+10, 20, 6, 30,
 			NL80211_RRF_NO_IR | NL80211_RRF_AUTO_BW),
 		/* IEEE 802.11 channel 14 - Only JP enables
 		 * this and for 802.11b only */
-		REG_RULE(2484-10, 2484+10, 20, 6, 20,
+		REG_RULE(2484-10, 2484+10, 20, 6, 30,
 			NL80211_RRF_NO_IR |
 			NL80211_RRF_NO_OFDM),
 		/* IEEE 802.11a, channel 36..48 */
-		REG_RULE(5180-10, 5240+10, 80, 6, 20,
+		REG_RULE(5180-10, 5240+10, 80, 6, 30,
                         NL80211_RRF_NO_IR |
                         NL80211_RRF_AUTO_BW),
 
 		/* IEEE 802.11a, channel 52..64 - DFS required */
-		REG_RULE(5260-10, 5320+10, 80, 6, 20,
+		REG_RULE(5260-10, 5320+10, 80, 6, 30,
 			NL80211_RRF_NO_IR |
 			NL80211_RRF_AUTO_BW |
 			NL80211_RRF_DFS),
 
 		/* IEEE 802.11a, channel 100..144 - DFS required */
-		REG_RULE(5500-10, 5720+10, 160, 6, 20,
+		REG_RULE(5500-10, 5720+10, 160, 6, 30,
 			NL80211_RRF_NO_IR |
 			NL80211_RRF_DFS),
 
 		/* IEEE 802.11a, channel 149..165 */
-		REG_RULE(5745-10, 5825+10, 80, 6, 20,
+		REG_RULE(5745-10, 5825+10, 80, 6, 30,
 			NL80211_RRF_NO_IR),
 
 		/* IEEE 802.11ad (60GHz), channels 1..3 */
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -70,8 +70,10 @@
 {
 	/* see 802.11 17.3.8.3.2 and Annex J
 	 * there are overlapping channel numbers in 5GHz and 2GHz bands */
+	/*
 	if (chan <= 0)
 		return 0; /* not supported */
+	*/
 	switch (band) {
 	case NL80211_BAND_2GHZ:
 		if (chan == 14)
