--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -702,7 +702,7 @@
 }
 
 
-enum hostapd_hw_mode ieee80211_freq_to_chan(int freq, u8 *channel)
+enum hostapd_hw_mode ieee80211_freq_to_chan(int freq, s16 *channel)
 {
 	u8 op_class;
 
@@ -723,7 +723,7 @@
  */
 enum hostapd_hw_mode ieee80211_freq_to_channel_ext(unsigned int freq,
 						   int sec_channel, int vht,
-						   u8 *op_class, u8 *channel)
+						   u8 *op_class, s16 *channel)
 {
 	u8 vht_opclass;
 
@@ -732,7 +732,7 @@
 	if (sec_channel > 1 || sec_channel < -1)
 		return NUM_HOSTAPD_MODES;
 
-	if (freq >= 2412 && freq <= 2472) {
+	if (freq >= 2312 && freq <= 2472) {
 		if ((freq - 2407) % 5)
 			return NUM_HOSTAPD_MODES;
 
@@ -921,7 +921,7 @@
 }
 
 
-static int ieee80211_chan_to_freq_us(u8 op_class, u8 chan)
+static int ieee80211_chan_to_freq_us(u8 op_class, s16 chan)
 {
 	switch (op_class) {
 	case 12: /* channels 1..11 */
@@ -965,7 +965,7 @@
 }
 
 
-static int ieee80211_chan_to_freq_eu(u8 op_class, u8 chan)
+static int ieee80211_chan_to_freq_eu(u8 op_class, s16 chan)
 {
 	switch (op_class) {
 	case 4: /* channels 1..13 */
@@ -1003,7 +1003,7 @@
 }
 
 
-static int ieee80211_chan_to_freq_jp(u8 op_class, u8 chan)
+static int ieee80211_chan_to_freq_jp(u8 op_class, s16 chan)
 {
 	switch (op_class) {
 	case 30: /* channels 1..13 */
@@ -1047,7 +1047,7 @@
 }
 
 
-static int ieee80211_chan_to_freq_cn(u8 op_class, u8 chan)
+static int ieee80211_chan_to_freq_cn(u8 op_class, s16 chan)
 {
 	switch (op_class) {
 	case 7: /* channels 1..13 */
@@ -1073,7 +1073,7 @@
 }
 
 
-static int ieee80211_chan_to_freq_global(u8 op_class, u8 chan)
+static int ieee80211_chan_to_freq_global(u8 op_class, s16 chan)
 {
 	/* Table E-4 in IEEE Std 802.11-2012 - Global operating classes */
 	switch (op_class) {
@@ -1141,7 +1141,7 @@
  * @chan: Channel number
  * Returns: Frequency in MHz or -1 if the specified channel is unknown
  */
-int ieee80211_chan_to_freq(const char *country, u8 op_class, u8 chan)
+int ieee80211_chan_to_freq(const char *country, u8 op_class, s16 chan)
 {
 	int freq;
 
@@ -1370,7 +1370,7 @@
 static enum phy_type ieee80211_phy_type_by_freq(int freq)
 {
 	enum hostapd_hw_mode hw_mode;
-	u8 channel;
+	s16 channel;
 
 	hw_mode = ieee80211_freq_to_chan(freq, &channel);
 
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -34,7 +34,7 @@
 	const u8 *wmm; /* WMM Information or Parameter Element */
 	const u8 *wmm_tspec;
 	const u8 *wps_ie;
-	const u8 *supp_channels;
+	const s16 *supp_channels;
 	const u8 *mdie;
 	const u8 *ftie;
 	const u8 *timeout_int;
@@ -149,11 +149,11 @@
 
 int hostapd_config_wmm_ac(struct hostapd_wmm_ac_params wmm_ac_params[],
 			  const char *name, const char *val);
-enum hostapd_hw_mode ieee80211_freq_to_chan(int freq, u8 *channel);
-int ieee80211_chan_to_freq(const char *country, u8 op_class, u8 chan);
+enum hostapd_hw_mode ieee80211_freq_to_chan(int freq, s16 *channel);
+int ieee80211_chan_to_freq(const char *country, u8 op_class, s16 chan);
 enum hostapd_hw_mode ieee80211_freq_to_channel_ext(unsigned int freq,
 						   int sec_channel, int vht,
-						   u8 *op_class, u8 *channel);
+						   u8 *op_class, s16 *channel);
 int ieee80211_is_dfs(int freq);
 enum phy_type ieee80211_get_phy_type(int freq, int ht, int vht);
 
